import nodemailer from 'nodemailer';
import Email from '../models/Email.js';

class EmailSenderService {
    constructor() {
        this.transporter = null;
        this.initializeTransporter();
    }

    // Initialize email transporter
    initializeTransporter() {
        if (!process.env.EMAIL_ADDRESS || !process.env.EMAIL_PASSWORD) {
            console.log('üìß Email sending not configured - missing credentials');
            return;
        }

        this.transporter = nodemailer.createTransporter({
            host: process.env.SMTP_SERVER || 'smtp.gmail.com',
            port: process.env.SMTP_PORT || 587,
            secure: false, // true for 465, false for other ports
            auth: {
                user: process.env.EMAIL_ADDRESS,
                pass: process.env.EMAIL_PASSWORD
            },
            tls: {
                rejectUnauthorized: false
            }
        });

        // Verify connection
        this.transporter.verify((error, success) => {
            if (error) {
                console.error('‚ùå Email transporter verification failed:', error);
            } else {
                console.log('‚úÖ Email transporter ready');
            }
        });
    }

    // Send email response
    async sendResponse(emailId, responseText, customSubject = null) {
        try {
            if (!this.transporter) {
                throw new Error('Email transporter not configured');
            }

            const email = await Email.findById(emailId);
            if (!email) {
                throw new Error('Email not found');
            }

            const subject = customSubject || `Re: ${email.subject}`;

            const mailOptions = {
                from: `"AI Support Assistant" <${process.env.EMAIL_ADDRESS}>`,
                to: email.senderEmail,
                subject: subject,
                text: responseText,
                html: this.formatHtmlResponse(responseText, email),
                inReplyTo: email.metadata?.messageId,
                references: email.metadata?.messageId
            };

            const info = await this.transporter.sendMail(mailOptions);

            // Update email status
            email.status = 'responded';
            email.responseTime = Date.now() - email.receivedDate.getTime();
            email.sentResponse = {
                messageId: info.messageId,
                sentAt: new Date(),
                responseText: responseText
            };
            await email.save();

            console.log(`‚úÖ Email response sent to ${email.senderEmail}`);
            return {
                success: true,
                messageId: info.messageId,
                sentTo: email.senderEmail
            };

        } catch (error) {
            console.error('‚ùå Error sending email response:', error);
            throw error;
        }
    }

    // Format HTML response
    formatHtmlResponse(responseText, originalEmail) {
        return `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
                    <h2 style="color: #2563eb; margin: 0;">AI Support Assistant</h2>
                    <p style="color: #6b7280; margin: 5px 0 0 0;">Automated Response</p>
                </div>
                
                <div style="background-color: white; padding: 20px; border-radius: 8px; border: 1px solid #e5e7eb;">
                    <div style="white-space: pre-line; line-height: 1.6; color: #374151;">
                        ${responseText}
                    </div>
                </div>
                
                <div style="margin-top: 20px; padding: 15px; background-color: #f3f4f6; border-radius: 8px; font-size: 12px; color: #6b7280;">
                    <p style="margin: 0;"><strong>Original Message:</strong></p>
                    <p style="margin: 5px 0 0 0;"><strong>From:</strong> ${originalEmail.senderEmail}</p>
                    <p style="margin: 5px 0 0 0;"><strong>Subject:</strong> ${originalEmail.subject}</p>
                    <p style="margin: 5px 0 0 0;"><strong>Received:</strong> ${originalEmail.receivedDate.toLocaleString()}</p>
                </div>
                
                <div style="margin-top: 20px; text-align: center; font-size: 11px; color: #9ca3af;">
                    <p>This is an automated response generated by AI Support Assistant.</p>
                    <p>If you need further assistance, please reply to this email.</p>
                </div>
            </div>
        `;
    }

    // Send bulk responses (for priority queue processing)
    async sendBulkResponses(emailResponses) {
        const results = [];

        for (const { emailId, responseText, customSubject } of emailResponses) {
            try {
                const result = await this.sendResponse(emailId, responseText, customSubject);
                results.push({ emailId, success: true, ...result });
            } catch (error) {
                results.push({
                    emailId,
                    success: false,
                    error: error.message
                });
            }
        }

        return results;
    }

    // Auto-respond to urgent emails
    async autoRespondUrgentEmails() {
        try {
            const urgentEmails = await Email.find({
                priority: 'urgent',
                status: 'pending',
                aiResponse: { $exists: true, $ne: null }
            }).limit(10);

            if (urgentEmails.length === 0) {
                console.log('üì≠ No urgent emails requiring auto-response');
                return [];
            }

            const responses = urgentEmails.map(email => ({
                emailId: email._id,
                responseText: email.aiResponse,
                customSubject: `[URGENT] Re: ${email.subject}`
            }));

            const results = await this.sendBulkResponses(responses);
            console.log(`üöÄ Auto-responded to ${results.filter(r => r.success).length} urgent emails`);

            return results;
        } catch (error) {
            console.error('‚ùå Error in auto-response process:', error);
            throw error;
        }
    }

    // Test email configuration
    async testEmailConfig() {
        try {
            if (!this.transporter) {
                return {
                    success: false,
                    message: 'Email transporter not configured'
                };
            }

            await this.transporter.verify();

            return {
                success: true,
                message: 'Email configuration is working correctly'
            };
        } catch (error) {
            return {
                success: false,
                message: error.message
            };
        }
    }
}

export default new EmailSenderService();